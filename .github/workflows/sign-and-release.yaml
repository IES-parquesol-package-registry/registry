name: Auto Release with Version Bump

on:
  push:
    branches:
      - main

permissions: write-all

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository with tags
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate GitHub App Token
        id: generate_token
        uses: peter-murray/workflow-application-token-action@v3
        with:
          application_id: ${{ vars.APP_ID }}
          application_private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Bump version in index.json
        id: bump
        run: |
          # Leer la versión actual desde index.json
          CURRENT_VERSION=$(jq -r '.version' index.json)
          echo "Current version: $CURRENT_VERSION"
          # Quitar la "v" para trabajar solo con números
          VERSION_NUM=${CURRENT_VERSION#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_NUM"
          # Incrementar la parte de parche
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "New version: $NEW_VERSION"
          # Actualizar el archivo index.json con la nueva versión
          jq --arg new_version "$NEW_VERSION" '.version = $new_version' index.json > tmp.json && mv tmp.json index.json
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Actualizar repositorio vía API
        id: update_repo
        run: |
          TOKEN=${{ steps.generate_token.outputs.token }}
          REPO=${{ github.repository }}
          MAIN_BRANCH=main
          FILE_PATH=index.json
          COMMIT_MESSAGE="Incrementar versión a $NEW_VERSION"
          COMMITTER_NAME="github-actions[bot]"
          COMMITTER_EMAIL="github-actions[bot]@users.noreply.github.com"

          MAIN_COMMIT=$(curl -s -H "Authorization: Bearer $TOKEN" "https://api.github.com/repos/$REPO/branches/$MAIN_BRANCH" | jq -r .commit.sha)
          TREE_SHA=$(curl -s -H "Authorization: Bearer $TOKEN" "https://api.github.com/repos/$REPO/commit/$MAIN_COMMIT" | jq -r .commit.tree.sha)
          FILE_CONTENT=$(cat $FILE_PATH)
          BLOB_ID=$(curl -s -H "Authorization: Bearer $TOKEN" -X POST "https://api.github.com/repos/$REPO/git/blobs" -d "{\"content\": \"$FILE_CONTENT\", \"encoding\": \"utf-8\"}" | jq -r .sha)
          NEW_TREE=$(curl -s -H "Authorization: Bearer $TOKEN" -X POST "https://api.github.com/repos/$REPO/git/trees" -d "{\"base_tree\": \"$TREE_SHA\", \"tree\": [ {\"path\": \"$FILE_PATH\", \"mode\": \"100644\", \"type\": \"blob\", \"sha\": \"$BLOB_ID\"} ]}" | jq -r .sha)
          COMMIT_ID=$(curl -s -H "Authorization: Bearer $TOKEN" -X POST "https://api.github.com/repos/$REPO/git/commit" -d "{\"message\": \"$COMMIT_MESSAGE\", \"tree\": \"$NEW_TREE\", \"parents\": [\"$MAIN_COMMIT\"], \"committer\": {\"name\": \"$COMMITTER_NAME\", \"email\": \"$COMMITTER_EMAIL\"}, \"author\": {\"name\": \"$COMMITTER_NAME\", \"email\": \"$COMMITTER_EMAIL\"}} " | jq -r .sha)
          curl -s -H "Authorization: Bearer $TOKEN" -X PATCH "https://api.github.com/repos/$REPO/branches/$MAIN_BRANCH" -d "{\"sha\": \"$COMMIT_ID\"}"
          echo "commit_id=$COMMIT_ID" >> $GITHUB_OUTPUT

      - name: Create new tag
        id: tag
        run: |
          NEW_VERSION=${{ steps.bump.outputs.new_version }}
          # Verificar si el tag ya existe
          if git rev-parse "$NEW_VERSION" >/dev/null 2>&1; then
            echo "Tag $NEW_VERSION already exists. Abortando."
            exit 1
          fi
          git tag "$NEW_VERSION"
          git push origin "$NEW_VERSION"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.bump.outputs.new_version }}
          name: "Release ${{ steps.bump.outputs.new_version }}"
          body: "Release automática. Versión actualizada a ${{ steps.bump.outputs.new_version }}."
          files: |
            ./index.json
            ./sign.sig
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
